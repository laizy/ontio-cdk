var searchIndex = JSON.parse('{\
"ontio_std":{"doc":"","i":[[5,"panic_fmt","ontio_std","Overrides the default panic_fmt",null,[[["panicinfo",3]]]],[5,"oom","","Overrides the default oom",null,[[["layout",3]]]],[0,"prelude","","The prelude module provides common data types in the…",null,null],[3,"Box","ontio_std::prelude","A pointer type for heap allocation.",null,null],[0,"v1","","The first version of the prelude of `alloc` crate.",null,null],[8,"ToOwned","ontio_std::prelude::v1","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",0,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",0,[[]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",0,[[]]],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",1,[[],["string",3]]],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but…",null,null],[0,"str","ontio_std::prelude","Unicode string slices.",null,null],[5,"from_boxed_utf8_unchecked","ontio_std::prelude::str","Converts a boxed slice of bytes to a boxed string slice…",null,[[["box",3]],["box",3]]],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","ontio_std::prelude::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",2,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the…",2,[[]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",2,[[]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",2,[[]]],[11,"strip_prefix_of","","Removes the pattern from the front of haystack, if it…",2,[[],["option",4]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",2,[[]]],[11,"strip_suffix_of","","Removes the pattern from the back of haystack, if it…",2,[[],["option",4]]],[4,"SearchStep","","Result of calling `Searcher::next()` or…",null,null],[13,"Match","","Expresses that a match of the pattern has been found at…",3,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a…",3,null],[13,"Done","","Expresses that every byte of the haystack has been…",3,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",4,[[]]],[10,"next","","Performs the next search step starting from the front.",4,[[],["searchstep",4]]],[11,"next_match","","Finds the next `Match` result. See `next()`",4,[[],["option",4]]],[11,"next_reject","","Finds the next `Reject` result. See `next()` and…",4,[[],["option",4]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",5,[[],["searchstep",4]]],[11,"next_match_back","","Finds the next `Match` result. See `next_back()`",5,[[],["option",4]]],[11,"next_reject_back","","Finds the next `Reject` result. See `next_back()`",5,[[],["option",4]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be…",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<\'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<\'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<\'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<\'a>>::Searcher`.",null,null],[3,"EncodeUtf16","ontio_std::prelude::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a…",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a…",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["result",4],["utf8error",3]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,[[],[["utf8error",3],["result",4]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and…",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without…",null,[[]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without…",null,[[]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`]…",null,null],[3,"EscapeDebug","","The return type of [`str::escape_debug`].",null,null],[3,"EscapeDefault","","The return type of [`str::escape_default`].",null,null],[3,"EscapeUnicode","","The return type of [`str::escape_unicode`].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",6,null],[10,"from_str","","Parses a string `s` to return a value of this type.",6,[[],["result",4]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[0,"string","ontio_std::prelude","A UTF-8 encoded, growable string.",null,null],[3,"String","ontio_std::prelude::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a…",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a…",null,null],[6,"ParseError","","A type alias for [`Infallible`].",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",1,[[],["string",3]]],[3,"Drain","","A draining iterator for `String`.",null,null],[3,"String","ontio_std::prelude","A UTF-8 encoded, growable string.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",1,[[],["string",3]]],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but…",null,null],[14,"format","","Creates a `String` using interpolation of runtime…",null,null],[0,"vec","","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","ontio_std::prelude::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[14,"vec","ontio_std::prelude","Creates a [`Vec`] containing the arguments.",null,null],[0,"cmp","","Functionality for ordering and comparison.",null,null],[8,"PartialEq","ontio_std::prelude::cmp","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",7,[[]]],[11,"ne","","This method tests for `!=`.",7,[[]]],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",8,null],[13,"Equal","","An ordering where a compared value is equal to another.",8,null],[13,"Greater","","An ordering where a compared value is greater than another.",8,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",9,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [`Ordering`] between `self` and…",10,[[],["ordering",4]]],[11,"max","","Compares and returns the maximum of two values.",10,[[]]],[11,"min","","Compares and returns the minimum of two values.",10,[[]]],[11,"clamp","","Restrict a value to a certain interval.",10,[[]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",11,[[],[["option",4],["ordering",4]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",11,[[]]],[11,"le","","This method tests less than or equal to (for `self` and…",11,[[]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",11,[[]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",11,[[]]],[5,"min","","Compares and returns the minimum of two values.",null,[[]]],[5,"min_by","","Returns the minimum of two values with respect to the…",null,[[]]],[5,"min_by_key","","Returns the element that gives the minimum value from the…",null,[[]]],[5,"max","","Compares and returns the maximum of two values.",null,[[]]],[5,"max_by","","Returns the maximum of two values with respect to the…",null,[[]]],[5,"max_by_key","","Returns the element that gives the maximum value from the…",null,[[]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[8,"Copy","ontio_std::prelude","Types whose values can be duplicated simply by copying bits.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[8,"Drop","","Custom code within the destructor.",null,null],[10,"drop","","Executes the destructor for this type.",12,[[]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",13,[[]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",14,[[]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",15,null],[10,"call_once","","Performs the call operation.",15,[[]]],[5,"drop","","Disposes of a value.",null,[[]]],[8,"Clone","","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",16,[[]]],[11,"clone_from","","Performs copy-assignment from `source`.",16,[[]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [`Ordering`] between `self` and…",10,[[],["ordering",4]]],[11,"max","","Compares and returns the maximum of two values.",10,[[]]],[11,"min","","Compares and returns the minimum of two values.",10,[[]]],[11,"clamp","","Restrict a value to a certain interval.",10,[[]]],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",7,[[]]],[11,"ne","","This method tests for `!=`.",7,[[]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",11,[[],[["option",4],["ordering",4]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",11,[[]]],[11,"le","","This method tests less than or equal to (for `self` and…",11,[[]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",11,[[]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",11,[[]]],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",17,[[]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",18,[[]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",19,[[]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",20,[[]]],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \\\"default value\\\" for a type.",21,[[]]],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",22,[[],["option",4]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",22,[[],["option",4]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",22,[[]]],[11,"rfold","","An iterator method that reduces the iterator\'s elements to…",22,[[]]],[11,"rfind","","Searches for an element of an iterator from the back that…",22,[[],["option",4]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact length of the iterator.",23,[[]]],[11,"is_empty","","Returns `true` if the iterator is empty.",23,[[]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",24,[[]]],[11,"extend_one","","Extends a collection with exactly one element.",24,[[]]],[11,"extend_reserve","","Reserves capacity in a collection for the given number of…",24,[[]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",25,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",25,null],[10,"into_iter","","Creates an iterator from a value.",25,[[]]],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",26,null],[10,"next","","Advances the iterator and returns the next value.",26,[[],["option",4]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",26,[[]]],[11,"count","","Consumes the iterator, counting the number of iterations…",26,[[]]],[11,"last","","Consumes the iterator, returning the last element.",26,[[],["option",4]]],[11,"nth","","Returns the `n`th element of the iterator.",26,[[],["option",4]]],[11,"step_by","","Creates an iterator starting at the same point, but…",26,[[],["stepby",3]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",26,[[],["chain",3]]],[11,"zip","","\'Zips up\' two iterators into a single iterator of pairs.",26,[[],["zip",3]]],[11,"map","","Takes a closure and creates an iterator which calls that…",26,[[],["map",3]]],[11,"for_each","","Calls a closure on each element of an iterator.",26,[[]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",26,[[],["filter",3]]],[11,"filter_map","","Creates an iterator that both filters and maps.",26,[[],["filtermap",3]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",26,[[],["enumerate",3]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",26,[[],["peekable",3]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",26,[[],["skipwhile",3]]],[11,"take_while","","Creates an iterator that yields elements based on a…",26,[[],["takewhile",3]]],[11,"map_while","","Creates an iterator that both yields elements based on a…",26,[[],["mapwhile",3]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",26,[[],["skip",3]]],[11,"take","","Creates an iterator that yields its first `n` elements.",26,[[],["take",3]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",26,[[],["scan",3]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",26,[[],["flatmap",3]]],[11,"flatten","","Creates an iterator that flattens nested structure.",26,[[],["flatten",3]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",26,[[],["fuse",3]]],[11,"inspect","","Does something with each element of an iterator, passing…",26,[[],["inspect",3]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",26,[[]]],[11,"collect","","Transforms an iterator into a collection.",26,[[]]],[11,"partition","","Consumes an iterator, creating two collections from it.",26,[[]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",26,[[]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",26,[[]]],[11,"try_fold","","An iterator method that applies a function as long as it…",26,[[]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",26,[[]]],[11,"fold","","An iterator method that applies a function, producing a…",26,[[]]],[11,"fold_first","","The same as `fold()`, but uses the first element in the…",26,[[],["option",4]]],[11,"all","","Tests if every element of the iterator matches a predicate.",26,[[]]],[11,"any","","Tests if any element of the iterator matches a predicate.",26,[[]]],[11,"find","","Searches for an element of an iterator that satisfies a…",26,[[],["option",4]]],[11,"find_map","","Applies function to the elements of iterator and returns…",26,[[],["option",4]]],[11,"try_find","","Applies function to the elements of iterator and returns…",26,[[],[["result",4],["option",4]]]],[11,"position","","Searches for an element in an iterator, returning its index.",26,[[],["option",4]]],[11,"rposition","","Searches for an element in an iterator from the right,…",26,[[],["option",4]]],[11,"max","","Returns the maximum element of an iterator.",26,[[],["option",4]]],[11,"min","","Returns the minimum element of an iterator.",26,[[],["option",4]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",26,[[],["option",4]]],[11,"max_by","","Returns the element that gives the maximum value with…",26,[[],["option",4]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",26,[[],["option",4]]],[11,"min_by","","Returns the element that gives the minimum value with…",26,[[],["option",4]]],[11,"rev","","Reverses an iterator\'s direction.",26,[[],["rev",3]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",26,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",26,[[],["copied",3]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",26,[[],["cloned",3]]],[11,"cycle","","Repeats an iterator endlessly.",26,[[],["cycle",3]]],[11,"sum","","Sums the elements of an iterator.",26,[[]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",26,[[]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",26,[[],["ordering",4]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",26,[[],["ordering",4]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",26,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",26,[[],[["option",4],["ordering",4]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",26,[[]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",26,[[]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",26,[[]]],[11,"lt","","Determines if the elements of this `Iterator` are…",26,[[]]],[11,"le","","Determines if the elements of this `Iterator` are…",26,[[]]],[11,"gt","","Determines if the elements of this `Iterator` are…",26,[[]]],[11,"ge","","Determines if the elements of this `Iterator` are…",26,[[]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",26,[[]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",26,[[]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",26,[[]]],[4,"Option","","The `Option` type. See the module level documentation for…",null,null],[13,"None","","No value",27,null],[13,"Some","","Some value `T`",27,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",28,null],[13,"Err","","Contains the error value",28,null],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[14,"asm","","Inline assembly.",null,null],[14,"assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at…",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message…",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"format_args","","Constructs parameters for the other string-formatting…",null,null],[14,"format_args_nl","","Same as `format_args`, but adds a newline in the end.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"include","","Parses a file as an expression or an item according to the…",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"llvm_asm","","LLVM-style inline assembly.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile time.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for…",null,null],[14,"bench","","Attribute macro applied to a function to turn it into a…",null,null],[14,"global_allocator","","Attribute macro applied to a static to register it as a…",null,null],[14,"test","","Attribute macro applied to a function to turn it into a…",null,null],[14,"test_case","","An implementation detail of the `#[test]` and `#[bench]`…",null,null],[14,"RustcDecodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[14,"RustcEncodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[14,"cfg_accessible","","Keeps the item it\'s applied to if the passed path is…",null,null],[0,"abi","ontio_std","The abi module provides serialization and deserialization…",null,null],[24,"Encoder","ontio_std::abi","",null,null],[24,"Decoder","","",null,null],[3,"Sink","","Encoding different types of data into byte array.",null,null],[3,"Source","","Parse data of bytearray type into original data type",null,null],[3,"EventBuilder","","Entity used to push events in a contract.",null,null],[3,"VmValueBuilder","","",null,null],[3,"VmValueParser","","",null,null],[12,"source","","",29,null],[4,"Error","","",null,null],[13,"UnexpectedEOF","","",30,null],[13,"IrregularData","","",30,null],[13,"InvalidUtf8","","",30,null],[13,"TypeInconsistency","","",30,null],[13,"LengthInconsistency","","",30,null],[11,"new","","Create a new sink entity, Specify initial capacity. For…",31,[[]]],[11,"write","","All data types that implement the encode interface can be…",31,[[["encoder",8]]]],[11,"write_neovm_address","","",31,[[["address",6]]]],[11,"write_native_varuint","","",31,[[]]],[11,"bytes","","Used to get the serialized result in bytearray format #…",31,[[]]],[11,"into","","Used to get the serialized result in Vec format # Example…",31,[[],["vec",3]]],[11,"new","","Create a new source instance # Example `# use…",32,[[]]],[11,"read_bytes","","read bytearray # Example `# use ontio_std::abi::{Source,…",32,[[],[["error",4],["result",4]]]],[11,"read","","Parse the bytearray data into the original data type. The…",32,[[],[["result",4],["decoder",8],["error",4]]]],[11,"read_address","","",32,[[],[["error",4],["address",6],["result",4]]]],[11,"read_native_address","","",32,[[],[["error",4],["address",6],["result",4]]]],[11,"read_native_varuint","","",32,[[],[["error",4],["result",4]]]],[11,"read_h256","","",32,[[],[["h256",3],["result",4],["error",4]]]],[11,"read_byte","","read byte. # Example `# use ontio_std::abi::{Source,…",32,[[],[["error",4],["result",4]]]],[11,"read_bool","","read bool. # Example `# use ontio_std::abi::{Source,…",32,[[],[["error",4],["result",4]]]],[11,"skip","","Skip specified long bytes. # Example `# use…",32,[[],[["result",4],["error",4]]]],[11,"backup","","Back specified length of bytes. # Example `# use…",32,[[]]],[11,"read_u16","","Read u16 type data. # Example `# use…",32,[[],[["error",4],["result",4]]]],[11,"read_u32","","Read u32 type data. # Example `# use…",32,[[],[["result",4],["error",4]]]],[11,"read_u64","","Read u64 type data. # Example `# use…",32,[[],[["error",4],["result",4]]]],[11,"read_u128","","Read u128 type data. # Example `# use…",32,[[],[["result",4],["error",4]]]],[11,"read_varuint","","",32,[[],[["error",4],["result",4]]]],[11,"new","","",33,[[]]],[11,"write","","",33,[[["vmvalueencoder",8]]]],[11,"string","","",33,[[]]],[11,"bytearray","","",33,[[]]],[11,"address","","",33,[[["address",6]]]],[11,"number","","",33,[[["u128",6]]]],[11,"bool","","",33,[[]]],[11,"h256","","",33,[[["h256",3]]]],[11,"bytes","","",33,[[],["vec",3]]],[11,"new","","",29,[[]]],[11,"read","","",29,[[],[["result",4],["vmvaluedecoder",8],["error",4]]]],[11,"string","","",29,[[],[["result",4],["error",4]]]],[11,"bytearray","","",29,[[],[["error",4],["result",4]]]],[11,"address","","",29,[[],[["error",4],["address",6],["result",4]]]],[11,"number","","",29,[[],[["result",4],["error",4]]]],[11,"bool","","",29,[[],[["error",4],["result",4]]]],[11,"h256","","",29,[[],[["h256",3],["result",4],["error",4]]]],[11,"new","","Create a new eventbuilder instance to push &str,…",34,[[]]],[11,"string","","Push &str type event in contract # Example `no_run # use…",34,[[]]],[11,"bytearray","","Push bytearray type event in contract # Example `no_run #…",34,[[]]],[11,"address","","Push Address type event in contract # Example `no_run #…",34,[[["address",6]]]],[11,"number","","Push U128 type event in contract # Example `no_run # use…",34,[[["u128",6]]]],[11,"bool","","Push bool type event in contract # Example `no_run # use…",34,[[]]],[11,"h256","","Push H256 type event in contract # Example `no_run # use…",34,[[["h256",3]]]],[11,"notify","","",34,[[]]],[8,"VmValueDecoder","","",null,null],[10,"deserialize","","",35,[[["vmvalueparser",3]],[["result",4],["error",4]]]],[8,"VmValueEncoder","","",null,null],[10,"serialize","","",36,[[["vmvaluebuilder",3]]]],[8,"Encoder","","",null,null],[10,"encode","","",37,[[["sink",3]]]],[8,"Dispatcher","","",null,null],[10,"dispatch","","",38,[[],["vec",3]]],[0,"console","ontio_std","The console module provides the debug function, which is…",null,null],[5,"debug","ontio_std::console","Used to print the debug information in the contract, which…",null,[[]]],[0,"contract","ontio_std","The contract module provides the method to call the asset…",null,null],[3,"TransferParam","ontio_std::contract","Used when a transaction contains transfers between…",null,null],[12,"from","","",39,null],[12,"to","","",39,null],[12,"amount","","",39,null],[0,"neo","","",null,null],[5,"call_contract","ontio_std::contract::neo","",null,[[["address",6],["vmvalueencoder",8]],[["vec",3],["option",4]]]],[0,"ontid","ontio_std::contract","",null,null],[5,"verify_signature","ontio_std::contract::ontid","",null,[[["u128",6]]]],[0,"wasm","ontio_std::contract","",null,null],[5,"call_contract","ontio_std::contract::wasm","",null,[[["encoder",8],["address",6]],[["vec",3],["option",4]]]],[0,"ont","ontio_std::contract","This module provides the operation API related to ont…",null,null],[5,"transfer","ontio_std::contract::ont","Transfer method of ont assets, Transfer ont assets from…",null,[[["address",6],["u128",6]]]],[5,"transfer_multi","","transfer_multi method of ont assets,Multiple transfers in…",null,[[]]],[5,"approve","","from-address can allow to-address to transfer a certain…",null,[[["address",6],["u128",6]]]],[5,"balance_of","","Query the balance of ont assets # Example `no_run # use…",null,[[["address",6]],["u128",6]]],[5,"allowance","","This method is used in conjunction with the approve method…",null,[[["address",6]],["u128",6]]],[5,"transfer_from","","Spender transfers a certain amount of ont from…",null,[[["address",6],["u128",6]]]],[0,"ong","ontio_std::contract","This module provides the operation API related to ong…",null,null],[5,"transfer","ontio_std::contract::ong","Transfer method of ong assets, Transfer ont assets from…",null,[[["address",6],["u128",6]]]],[5,"transfer_multi","","transfer_multi method of ong assets,Multiple transfers in…",null,[[]]],[5,"balance_of","","Query the balance of ong assets # Example `no_run # use…",null,[[["address",6]],["u128",6]]],[5,"approve","","from-address can allow to-address to transfer a certain…",null,[[["address",6],["u128",6]]]],[5,"allowance","","This method is used in conjunction with the approve method…",null,[[["address",6]],["u128",6]]],[5,"transfer_from","","Spender transfers a certain amount of ong from…",null,[[["address",6],["u128",6]]]],[0,"database","ontio_std","The database module provides the interface to save the…",null,null],[3,"ListStore","ontio_std::database","",null,null],[5,"get","","",null,[[["asref",8]],["option",4]]],[5,"put","","",null,[[["asref",8],["encoder",8]]]],[5,"delete","","",null,[[["asref",8]]]],[11,"open","","",40,[[["string",3]],["liststore",3]]],[11,"len","","",40,[[]]],[11,"is_empty","","",40,[[]]],[11,"pop","","",40,[[],["option",4]]],[11,"remove","","",40,[[]]],[11,"push","","",40,[[]]],[11,"insert","","",40,[[]]],[11,"clear","","",40,[[]]],[11,"iter","","",40,[[],["iterator",3]]],[11,"get","","",40,[[],["option",4]]],[11,"flush","","",40,[[]]],[0,"runtime","ontio_std","The runtime module provides an interface to interact with…",null,null],[5,"call_contract","ontio_std::runtime","With this method, another contract can be called, When…",null,[[["address",6]],[["vec",3],["option",4]]]],[5,"contract_create","","Create a new contract based on the parameters passed in",null,[[],["address",6]]],[5,"contract_migrate","","contract migrate",null,[[],["address",6]]],[5,"contract_delete","","delete the contract",null,[[]]],[5,"storage_write","","Save key-value as a key-value pair",null,[[]]],[5,"storage_delete","","Delete key-value pairs according to the key",null,[[]]],[5,"storage_read","","Read key-value pairs according to key.",null,[[],[["vec",3],["option",4]]]],[5,"timestamp","","Get timestamp in current block # Example",null,[[]]],[5,"block_height","","Get current block height # Example",null,[[]]],[5,"address","","Get the address of current executing contract # Example",null,[[],["address",6]]],[5,"caller","","return Caller\'s contract address # Example",null,[[],["address",6]]],[5,"entry_address","","return the entry address # Example",null,[[],["address",6]]],[5,"current_blockhash","","return current block hash # Example",null,[[],["h256",3]]],[5,"current_txhash","","return current tx hash # Example",null,[[],["h256",3]]],[5,"sha256","","Calculate the hash value # Example",null,[[],["h256",3]]],[5,"check_witness","","Check signature # Example",null,[[["address",6]]]],[5,"input","","Get input data from transaction or caller contract # Example",null,[[],["vec",3]]],[5,"ret","","return the result of execution and exit contract execution…",null,[[]]],[5,"panic","","When the function is executed, all writes to the chain…",null,[[]]],[0,"types","ontio_std","The types module provides common data types such as…",null,null],[3,"H256","ontio_std::types","A byte array of length 32 representing the block hash, etc.",null,null],[12,"0","","",41,null],[3,"H160","","A byte array of length 20 representing the Address.",null,null],[12,"0","","",42,null],[6,"Address","","Byte array of length 20",null,null],[6,"U128","","Byte array of length 16",null,null],[6,"I128","","",null,null],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",41,[[],["h256",3]]],[11,"zero","","Returns a new zero-initialized fixed hash.",41,[[],["h256",3]]],[11,"len_bytes","","Returns the size of this hash in bytes.",41,[[]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",41,[[]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",41,[[]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",41,[[]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",41,[[]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",41,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",41,[[]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",41,[[]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",41,[[]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",41,[[]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",41,[[]]],[11,"is_zero","","Returns `true` if no bits are set.",41,[[]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",42,[[],["h160",3]]],[11,"zero","","Returns a new zero-initialized fixed hash.",42,[[],["h160",3]]],[11,"len_bytes","","Returns the size of this hash in bytes.",42,[[]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",42,[[]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",42,[[]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",42,[[]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",42,[[]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",42,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",42,[[]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",42,[[]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",42,[[]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",42,[[]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",42,[[]]],[11,"is_zero","","Returns `true` if no bits are set.",42,[[]]],[11,"to_hex_string","","",41,[[],["string",3]]],[11,"to_hex_string","","",42,[[],["string",3]]],[11,"to_hex_string","","",43,[[],["string",3]]],[11,"new","","",42,[[]]],[11,"new","","",41,[[]]],[0,"macros","ontio_std","Macro module provides common macro functions, such as…",null,null],[14,"base58","ontio_std::macros","",null,null],[23,"contract","","",null,null],[23,"event","","",null,null],[11,"from","ontio_std::prelude::v1","",44,[[]]],[11,"from","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"into_searcher","","",44,[[],["charpredicatesearcher",3]]],[11,"is_contained_in","","",44,[[]]],[11,"is_prefix_of","","",44,[[]]],[11,"strip_prefix_of","","",44,[[],["option",4]]],[11,"is_suffix_of","","",44,[[]]],[11,"strip_suffix_of","","",44,[[],["option",4]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"into_future","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"from","ontio_std::prelude","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"from","ontio_std::prelude::vec","",46,[[]]],[11,"into_iter","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"from","ontio_std::prelude::str::pattern","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"from","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"from","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"from","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"from","ontio_std::prelude::str","",51,[[]]],[11,"into_iter","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into_iter","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into_iter","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into_iter","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into_iter","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into_iter","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"from","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"from","","",58,[[]]],[11,"into_iter","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"to_string","","",58,[[],["string",3]]],[11,"from","","",59,[[]]],[11,"into_iter","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"to_string","","",59,[[],["string",3]]],[11,"from","","",60,[[]]],[11,"into_iter","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"to_string","","",60,[[],["string",3]]],[11,"from","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"from","","",62,[[]]],[11,"into_iter","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into_iter","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into_iter","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into_iter","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into_iter","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into_iter","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into_iter","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"from","","",69,[[]]],[11,"into_iter","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into_iter","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into_iter","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into_iter","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"from","","",73,[[]]],[11,"into_iter","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"from","ontio_std::prelude::string","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"to_string","","",74,[[],["string",3]]],[11,"from","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"to_string","","",75,[[],["string",3]]],[11,"from","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","ontio_std::prelude::vec","",77,[[]]],[11,"into_iter","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into_iter","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into_iter","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","ontio_std::prelude::cmp","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","ontio_std::prelude","",27,[[]]],[11,"from","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"from","ontio_std::abi","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","ontio_std::contract","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","ontio_std::database","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","ontio_std::types","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"to_string","","",41,[[],["string",3]]],[11,"from","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"to_string","","",42,[[],["string",3]]],[11,"cmp","ontio_std::prelude","",27,[[["option",4]],["ordering",4]]],[11,"cmp","ontio_std::prelude::cmp","",8,[[["ordering",4]],["ordering",4]]],[11,"cmp","","",9,[[["reverse",3]],["ordering",4]]],[11,"cmp","ontio_std::prelude","",28,[[["result",4]],["ordering",4]]],[11,"product","","Takes each element in the `Iterator`: if it is a `None`,…",27,[[],["option",4]]],[11,"product","","Takes each element in the `Iterator`: if it is an `Err`,…",28,[[],["result",4]]],[11,"from","","Copies `val` into a new `Some`.",27,[[],["option",4]]],[11,"from","","Converts from `&Option<T>` to `Option<&T>`.",27,[[["option",4]],["option",4]]],[11,"from","","Converts from `&mut Option<T>` to `Option<&mut T>`",27,[[["option",4]],["option",4]]],[11,"hash","","",27,[[]]],[11,"hash","ontio_std::prelude::cmp","",9,[[]]],[11,"hash","ontio_std::prelude","",28,[[]]],[11,"hash","ontio_std::prelude::cmp","",8,[[]]],[11,"from_iter","ontio_std::prelude","Takes each element in the `Iterator`: if it is an `Err`,…",28,[[],["result",4]]],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is…",27,[[],["option",4]]],[11,"next_back","ontio_std::prelude::str","",73,[[],["option",4]]],[11,"next_back","","",69,[[],["option",4]]],[11,"next_back","","",56,[[],["option",4]]],[11,"next_back","","",64,[[],["option",4]]],[11,"next_back","","",54,[[],["option",4]]],[11,"nth_back","","",54,[[],["option",4]]],[11,"rfind","","",54,[[],["option",4]]],[11,"next_back","","",53,[[],["option",4]]],[11,"next_back","","",65,[[],["option",4]]],[11,"next_back","","",67,[[],["option",4]]],[11,"next_back","","",55,[[],["option",4]]],[11,"next_back","","",63,[[],["option",4]]],[11,"next_back","","",52,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",66,[[],["option",4]]],[11,"next_back","","",72,[[],["option",4]]],[11,"next_back","","",68,[[],["option",4]]],[11,"partial_cmp","ontio_std::prelude","",27,[[["option",4]],[["option",4],["ordering",4]]]],[11,"lt","","",27,[[["option",4]]]],[11,"le","","",27,[[["option",4]]]],[11,"gt","","",27,[[["option",4]]]],[11,"ge","","",27,[[["option",4]]]],[11,"partial_cmp","ontio_std::prelude::cmp","",9,[[["reverse",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["reverse",3]]]],[11,"le","","",9,[[["reverse",3]]]],[11,"gt","","",9,[[["reverse",3]]]],[11,"ge","","",9,[[["reverse",3]]]],[11,"partial_cmp","ontio_std::prelude","",28,[[["result",4]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["result",4]]]],[11,"le","","",28,[[["result",4]]]],[11,"gt","","",28,[[["result",4]]]],[11,"ge","","",28,[[["result",4]]]],[11,"partial_cmp","ontio_std::prelude::cmp","",8,[[["ordering",4]],[["option",4],["ordering",4]]]],[11,"into_result","ontio_std::prelude","",28,[[],["result",4]]],[11,"from_ok","","",28,[[],["result",4]]],[11,"from_error","","",28,[[],["result",4]]],[11,"into_result","","",27,[[],[["result",4],["noneerror",3]]]],[11,"from_ok","","",27,[[],["option",4]]],[11,"from_error","","",27,[[["noneerror",3]],["option",4]]],[11,"haystack","ontio_std::prelude::str::pattern","",48,[[]]],[11,"next","","",48,[[],["searchstep",4]]],[11,"next_match","","",48,[[],["option",4]]],[11,"next_reject","","",48,[[],["option",4]]],[11,"haystack","","",49,[[]]],[11,"next","","",49,[[],["searchstep",4]]],[11,"next_match","","",49,[[],["option",4]]],[11,"next_reject","","",49,[[],["option",4]]],[11,"haystack","","",47,[[]]],[11,"next","","",47,[[],["searchstep",4]]],[11,"next_match","","",47,[[],["option",4]]],[11,"haystack","","",50,[[]]],[11,"next","","",50,[[],["searchstep",4]]],[11,"next_match","","",50,[[],["option",4]]],[11,"into_iter","ontio_std::prelude","Returns a consuming iterator over the possibly contained…",27,[[],["intoiter",3]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained…",28,[[],["intoiter",3]]],[11,"clone","ontio_std::prelude::str","",55,[[],["charindices",3]]],[11,"clone","","",51,[[],["encodeutf16",3]]],[11,"clone","","",72,[[],["rsplitterminator",3]]],[11,"clone","","",56,[[],["chars",3]]],[11,"clone","","",68,[[],["rsplit",3]]],[11,"clone","ontio_std::prelude","",27,[[],["option",4]]],[11,"clone_from","","",27,[[["option",4]]]],[11,"clone","ontio_std::prelude::str","",58,[[],["escapedebug",3]]],[11,"clone","","",61,[[],["utf8error",3]]],[11,"clone","","",71,[[],["splitn",3]]],[11,"clone","ontio_std::prelude::str::pattern","",47,[[],["charsearcher",3]]],[11,"clone","ontio_std::prelude::str","",54,[[],["bytes",3]]],[11,"clone","ontio_std::prelude::cmp","",9,[[],["reverse",3]]],[11,"clone","ontio_std::prelude::str","",62,[[],["lines",3]]],[11,"clone","","",66,[[],["matches",3]]],[11,"clone","","",60,[[],["escapeunicode",3]]],[11,"clone","ontio_std::prelude::str::pattern","",48,[[],["charslicesearcher",3]]],[11,"clone","","",49,[[],["charpredicatesearcher",3]]],[11,"clone","","",3,[[],["searchstep",4]]],[11,"clone","ontio_std::prelude::str","",57,[[],["parseboolerror",3]]],[11,"clone","","",64,[[],["matchindices",3]]],[11,"clone","","",59,[[],["escapedefault",3]]],[11,"clone","","",73,[[],["splitterminator",3]]],[11,"clone","","",70,[[],["rsplitn",3]]],[11,"clone","ontio_std::prelude::cmp","",8,[[],["ordering",4]]],[11,"clone","ontio_std::prelude::str","",53,[[],["splitwhitespace",3]]],[11,"clone","","",65,[[],["rmatchindices",3]]],[11,"clone","","",69,[[],["split",3]]],[11,"clone","ontio_std::prelude","",28,[[],["result",4]]],[11,"clone_from","","",28,[[["result",4]]]],[11,"clone","ontio_std::prelude::str::pattern","",50,[[],["strsearcher",3]]],[11,"clone","ontio_std::prelude::str","",67,[[],["rmatches",3]]],[11,"clone","","",52,[[],["splitasciiwhitespace",3]]],[11,"clone","","",63,[[],["linesany",3]]],[11,"fmt","","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",61,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",60,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",59,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sum","ontio_std::prelude","Takes each element in the `Iterator`: if it is an `Err`,…",28,[[],["result",4]]],[11,"sum","","Takes each element in the `Iterator`: if it is a `None`,…",27,[[],["option",4]]],[11,"len","ontio_std::prelude::str","",54,[[]]],[11,"is_empty","","",54,[[]]],[11,"default","ontio_std::prelude","Returns [`None`][Option::None].",27,[[],["option",4]]],[11,"default","ontio_std::prelude::cmp","",9,[[],["reverse",3]]],[11,"fmt","ontio_std::prelude","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",53,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",61,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",64,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",56,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",54,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",59,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",73,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",52,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str::pattern","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",69,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::cmp","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",72,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str::pattern","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",55,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",66,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str::pattern","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",65,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",68,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",67,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::cmp","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",70,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str::pattern","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",71,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str::pattern","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::str","",62,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",60,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",57,[[["parseboolerror",3]]]],[11,"ne","","",57,[[["parseboolerror",3]]]],[11,"eq","ontio_std::prelude::str::pattern","",3,[[["searchstep",4]]]],[11,"ne","","",3,[[["searchstep",4]]]],[11,"eq","ontio_std::prelude","",27,[[["option",4]]]],[11,"ne","","",27,[[["option",4]]]],[11,"eq","","",28,[[["result",4]]]],[11,"ne","","",28,[[["result",4]]]],[11,"eq","ontio_std::prelude::str","",61,[[["utf8error",3]]]],[11,"ne","","",61,[[["utf8error",3]]]],[11,"eq","ontio_std::prelude::cmp","",8,[[["ordering",4]]]],[11,"eq","","",9,[[["reverse",3]]]],[11,"ne","","",9,[[["reverse",3]]]],[11,"next_back","ontio_std::prelude::str::pattern","",50,[[],["searchstep",4]]],[11,"next_match_back","","",50,[[],["option",4]]],[11,"next_back","","",48,[[],["searchstep",4]]],[11,"next_match_back","","",48,[[],["option",4]]],[11,"next_reject_back","","",48,[[],["option",4]]],[11,"next_back","","",49,[[],["searchstep",4]]],[11,"next_match_back","","",49,[[],["option",4]]],[11,"next_reject_back","","",49,[[],["option",4]]],[11,"next_back","","",47,[[],["searchstep",4]]],[11,"next_match_back","","",47,[[],["option",4]]],[11,"next","ontio_std::prelude::str","",65,[[],["option",4]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"last","","",62,[[],["option",4]]],[11,"next","","",67,[[],["option",4]]],[11,"next","","",63,[[],["option",4]]],[11,"size_hint","","",63,[[]]],[11,"next","","",68,[[],["option",4]]],[11,"next","","",69,[[],["option",4]]],[11,"next","","",56,[[],["option",4]]],[11,"count","","",56,[[]]],[11,"size_hint","","",56,[[]]],[11,"last","","",56,[[],["option",4]]],[11,"next","","",58,[[],["option",4]]],[11,"size_hint","","",58,[[]]],[11,"try_fold","","",58,[[]]],[11,"fold","","",58,[[]]],[11,"next","","",53,[[],["option",4]]],[11,"size_hint","","",53,[[]]],[11,"last","","",53,[[],["option",4]]],[11,"next","","",73,[[],["option",4]]],[11,"next","","",54,[[],["option",4]]],[11,"size_hint","","",54,[[]]],[11,"count","","",54,[[]]],[11,"last","","",54,[[],["option",4]]],[11,"nth","","",54,[[],["option",4]]],[11,"all","","",54,[[]]],[11,"any","","",54,[[]]],[11,"find","","",54,[[],["option",4]]],[11,"position","","",54,[[],["option",4]]],[11,"rposition","","",54,[[],["option",4]]],[11,"next","","",64,[[],["option",4]]],[11,"next","","",70,[[],["option",4]]],[11,"next","","",52,[[],["option",4]]],[11,"size_hint","","",52,[[]]],[11,"last","","",52,[[],["option",4]]],[11,"next","","",72,[[],["option",4]]],[11,"next","","",66,[[],["option",4]]],[11,"next","","",71,[[],["option",4]]],[11,"next","","",55,[[],["option",4]]],[11,"count","","",55,[[]]],[11,"size_hint","","",55,[[]]],[11,"last","","",55,[[],["option",4]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"try_fold","","",59,[[]]],[11,"fold","","",59,[[]]],[11,"next","","",51,[[],["option",4]]],[11,"size_hint","","",51,[[]]],[11,"next","","",60,[[],["option",4]]],[11,"size_hint","","",60,[[]]],[11,"try_fold","","",60,[[]]],[11,"fold","","",60,[[]]],[11,"hash","ontio_std::prelude","",45,[[]]],[11,"hash","ontio_std::prelude::vec","",46,[[]]],[11,"hash","ontio_std::prelude::v1","",44,[[]]],[11,"clone","ontio_std::prelude::vec","",46,[[],["vec",3]]],[11,"clone_from","","",46,[[["vec",3]]]],[11,"clone","ontio_std::prelude::v1","",44,[[],["box",3]]],[11,"clone","ontio_std::prelude","",45,[[],["string",3]]],[11,"clone_from","","",45,[[["string",3]]]],[11,"clone","ontio_std::prelude::v1","Returns a new box with a `clone()` of this box\'s contents.",44,[[],["box",3]]],[11,"clone_from","","Copies `source`\'s contents into `self` without creating a…",44,[[["box",3]]]],[11,"clone","","",44,[[],["box",3]]],[11,"clone_from","","",44,[[["box",3]]]],[11,"clone","ontio_std::prelude::string","",74,[[],["fromutf8error",3]]],[11,"clone","ontio_std::prelude::vec","",77,[[],["intoiter",3]]],[11,"cmp","ontio_std::prelude","",45,[[["string",3]],["ordering",4]]],[11,"cmp","ontio_std::prelude::v1","",44,[[["box",3]],["ordering",4]]],[11,"cmp","ontio_std::prelude::vec","",46,[[["vec",3]],["ordering",4]]],[11,"fmt","ontio_std::prelude","",45,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::string","",74,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::v1","",44,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::string","",75,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","ontio_std::prelude","",45,[[["string",3]]]],[11,"ne","","",45,[[["string",3]]]],[11,"eq","ontio_std::prelude::vec","",46,[[["vec",3]]]],[11,"ne","","",46,[[["vec",3]]]],[11,"eq","","",46,[[]]],[11,"ne","","",46,[[]]],[11,"eq","ontio_std::prelude","",45,[[]]],[11,"ne","","",45,[[]]],[11,"eq","ontio_std::prelude::vec","",46,[[]]],[11,"ne","","",46,[[]]],[11,"eq","","",46,[[]]],[11,"ne","","",46,[[]]],[11,"eq","","",46,[[]]],[11,"ne","","",46,[[]]],[11,"eq","ontio_std::prelude","",45,[[["cow",4]]]],[11,"ne","","",45,[[["cow",4]]]],[11,"eq","ontio_std::prelude::v1","",44,[[["box",3]]]],[11,"ne","","",44,[[["box",3]]]],[11,"eq","ontio_std::prelude","",45,[[]]],[11,"ne","","",45,[[]]],[11,"eq","ontio_std::prelude::string","",74,[[["fromutf8error",3]]]],[11,"ne","","",74,[[["fromutf8error",3]]]],[11,"add_assign","ontio_std::prelude","",45,[[]]],[11,"write_str","","",45,[[],[["result",4],["error",3]]]],[11,"write_char","","",45,[[],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::vec","",79,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::string","",76,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::v1","",44,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude","",45,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::vec","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::string","",75,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::vec","",78,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",77,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::string","",74,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ontio_std::prelude::vec","",80,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_str","ontio_std::prelude","",45,[[],[["result",4],["string",3]]]],[11,"as_mut","ontio_std::prelude::v1","",44,[[]]],[11,"as_mut","ontio_std::prelude::vec","",46,[[],["vec",3]]],[11,"as_mut","ontio_std::prelude","",45,[[]]],[11,"as_mut","ontio_std::prelude::vec","",46,[[]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",46,[[],["intoiter",3]]],[11,"to_string","ontio_std::prelude","",45,[[],["string",3]]],[11,"fmt","ontio_std::prelude::v1","",44,[[["formatter",3]],[["result",4],["error",3]]]],[11,"borrow_mut","","",44,[[]]],[11,"borrow_mut","ontio_std::prelude::vec","",46,[[]]],[11,"borrow_mut","ontio_std::prelude","",45,[[]]],[11,"finish","ontio_std::prelude::v1","",44,[[]]],[11,"write","","",44,[[]]],[11,"write_u8","","",44,[[]]],[11,"write_u16","","",44,[[]]],[11,"write_u32","","",44,[[]]],[11,"write_u64","","",44,[[]]],[11,"write_u128","","",44,[[]]],[11,"write_usize","","",44,[[]]],[11,"write_i8","","",44,[[]]],[11,"write_i16","","",44,[[]]],[11,"write_i32","","",44,[[]]],[11,"write_i64","","",44,[[]]],[11,"write_i128","","",44,[[]]],[11,"write_isize","","",44,[[]]],[11,"next_back","","",44,[[],["option",4]]],[11,"nth_back","","",44,[[],["option",4]]],[11,"next_back","ontio_std::prelude::vec","",78,[[],["option",4]]],[11,"next_back","ontio_std::prelude::string","",76,[[],["option",4]]],[11,"next_back","ontio_std::prelude::vec","",77,[[],["option",4]]],[11,"next_back","","",79,[[],["option",4]]],[11,"deref_mut","","",46,[[]]],[11,"deref_mut","ontio_std::prelude::v1","",44,[[]]],[11,"deref_mut","ontio_std::prelude","",45,[[]]],[11,"resume","ontio_std::prelude::v1","",44,[[["pin",3],["box",3]],["generatorstate",4]]],[11,"call_mut","","",44,[[]]],[11,"len","","",44,[[]]],[11,"is_empty","","",44,[[]]],[11,"is_empty","ontio_std::prelude::vec","",78,[[]]],[11,"is_empty","","",77,[[]]],[11,"poll","ontio_std::prelude::v1","",44,[[["pin",3],["context",3],["box",3]],["poll",4]]],[11,"index","ontio_std::prelude","",45,[[["rangetoinclusive",3]]]],[11,"index","","",45,[[["rangefrom",3]]]],[11,"index","","",45,[[["rangeto",3]]]],[11,"index","","",45,[[["rangeinclusive",3]]]],[11,"index","","",45,[[["rangefull",3]]]],[11,"index","ontio_std::prelude::vec","",46,[[]]],[11,"index","ontio_std::prelude","",45,[[["range",3]]]],[11,"next","ontio_std::prelude::v1","",44,[[],["option",4]]],[11,"size_hint","","",44,[[]]],[11,"nth","","",44,[[],["option",4]]],[11,"last","","",44,[[],["option",4]]],[11,"next","ontio_std::prelude::vec","",79,[[],["option",4]]],[11,"size_hint","","",79,[[]]],[11,"next","","",77,[[],["option",4]]],[11,"size_hint","","",77,[[]]],[11,"count","","",77,[[]]],[11,"next","","",78,[[],["option",4]]],[11,"size_hint","","",78,[[]]],[11,"next","ontio_std::prelude::string","",76,[[],["option",4]]],[11,"size_hint","","",76,[[]]],[11,"last","","",76,[[],["option",4]]],[11,"next","ontio_std::prelude::vec","",80,[[],["option",4]]],[11,"size_hint","","",80,[[]]],[11,"borrow","ontio_std::prelude","",45,[[]]],[11,"borrow","ontio_std::prelude::v1","",44,[[]]],[11,"borrow","ontio_std::prelude::vec","",46,[[]]],[11,"from","","",46,[[],["vec",3]]],[11,"from","ontio_std::prelude","",45,[[["cow",4]],["string",3]]],[11,"from","ontio_std::prelude::vec","",46,[[["cow",4]],["vec",3]]],[11,"from","ontio_std::prelude","",45,[[],["string",3]]],[11,"from","","Converts a `&mut str` into a `String`.",45,[[],["string",3]]],[11,"from","ontio_std::prelude::vec","",46,[[],["vec",3]]],[11,"from","ontio_std::prelude::v1","",44,[[["cow",4]],["box",3]]],[11,"from","","",44,[[["cow",4]],["box",3]]],[11,"from","","",44,[[["vec",3]],["box",3]]],[11,"from","ontio_std::prelude::vec","",46,[[],["vec",3]]],[11,"from","","",46,[[],["vec",3]]],[11,"from","","Converts the given `String` to a vector `Vec` that holds…",46,[[["string",3]],["vec",3]]],[11,"from","ontio_std::prelude","",45,[[["string",3]],["string",3]]],[11,"from","ontio_std::prelude::v1","Converts a `&str` into a `Box<str>`",44,[[],["box",3]]],[11,"from","","Converts a `&[T]` into a `Box<[T]>`",44,[[],["box",3]]],[11,"from","ontio_std::prelude","Converts the given boxed `str` slice to a `String`. It is…",45,[[["box",3]],["string",3]]],[11,"from","ontio_std::prelude::vec","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",46,[[["vecdeque",3]],["vec",3]]],[11,"from","","",46,[[["box",3]],["vec",3]]],[11,"from","","",46,[[["binaryheap",3]],["vec",3]]],[11,"from","ontio_std::prelude::v1","Converts a `[T; N]` into a `Box<[T]>`",44,[[],["box",3]]],[11,"from","","Converts a generic type `T` into a `Box<T>`",44,[[],["box",3]]],[11,"from","","Converts the given `String` to a boxed `str` slice that is…",44,[[["string",3]],["box",3]]],[11,"from","","Converts a `Box<str>>` into a `Box<[u8]>`",44,[[["box",3]],["box",3]]],[11,"partial_cmp","ontio_std::prelude","",45,[[["string",3]],[["option",4],["ordering",4]]]],[11,"lt","","",45,[[["string",3]]]],[11,"le","","",45,[[["string",3]]]],[11,"gt","","",45,[[["string",3]]]],[11,"ge","","",45,[[["string",3]]]],[11,"partial_cmp","ontio_std::prelude::v1","",44,[[["box",3]],[["option",4],["ordering",4]]]],[11,"lt","","",44,[[["box",3]]]],[11,"le","","",44,[[["box",3]]]],[11,"ge","","",44,[[["box",3]]]],[11,"gt","","",44,[[["box",3]]]],[11,"partial_cmp","ontio_std::prelude::vec","",46,[[["vec",3]],[["option",4],["ordering",4]]]],[11,"from_iter","ontio_std::prelude","",45,[[],["string",3]]],[11,"from_iter","ontio_std::prelude::vec","",46,[[],["vec",3]]],[11,"from_iter","ontio_std::prelude","",45,[[],["string",3]]],[11,"from_iter","","",45,[[],["string",3]]],[11,"from_iter","","",45,[[],["string",3]]],[11,"from_iter","ontio_std::prelude::v1","",44,[[],["box",3]]],[11,"from_iter","ontio_std::prelude","",45,[[],["string",3]]],[11,"call","ontio_std::prelude::v1","",44,[[]]],[11,"call_once","","",44,[[]]],[11,"extend","ontio_std::prelude","",45,[[]]],[11,"extend_one","","",45,[[["cow",4]]]],[11,"extend","","",45,[[]]],[11,"extend_one","","",45,[[]]],[11,"extend_reserve","","",45,[[]]],[11,"extend","","",45,[[]]],[11,"extend_one","","",45,[[]]],[11,"extend","ontio_std::prelude::vec","",46,[[]]],[11,"extend_one","","",46,[[]]],[11,"extend_reserve","","",46,[[]]],[11,"extend","","",46,[[]]],[11,"extend_one","","",46,[[]]],[11,"extend_reserve","","",46,[[]]],[11,"extend","ontio_std::prelude","",45,[[]]],[11,"extend_one","","",45,[[["string",3]]]],[11,"extend","","",45,[[]]],[11,"extend_one","","",45,[[]]],[11,"extend_reserve","","",45,[[]]],[11,"as_ref","ontio_std::prelude::v1","",44,[[]]],[11,"as_ref","ontio_std::prelude","",45,[[]]],[11,"as_ref","ontio_std::prelude::vec","",77,[[]]],[11,"as_ref","","",46,[[],["vec",3]]],[11,"as_ref","ontio_std::prelude","",45,[[]]],[11,"as_ref","ontio_std::prelude::vec","",46,[[]]],[11,"deref","ontio_std::prelude::v1","",44,[[]]],[11,"deref","ontio_std::prelude::vec","",46,[[]]],[11,"deref","ontio_std::prelude","",45,[[]]],[11,"drop","ontio_std::prelude::vec","",79,[[]]],[11,"drop","","",77,[[]]],[11,"drop","","",46,[[]]],[11,"drop","","",78,[[]]],[11,"drop","","",80,[[]]],[11,"drop","ontio_std::prelude::v1","",44,[[]]],[11,"drop","ontio_std::prelude::string","",76,[[]]],[11,"add","ontio_std::prelude","",45,[[],["string",3]]],[11,"index_mut","","",45,[[["rangefrom",3]]]],[11,"index_mut","ontio_std::prelude::vec","",46,[[]]],[11,"index_mut","ontio_std::prelude","",45,[[["range",3]]]],[11,"index_mut","","",45,[[["rangefull",3]]]],[11,"index_mut","","",45,[[["rangeto",3]]]],[11,"index_mut","","",45,[[["rangetoinclusive",3]]]],[11,"index_mut","","",45,[[["rangeinclusive",3]]]],[11,"default","","Creates an empty `String`.",45,[[],["string",3]]],[11,"default","ontio_std::prelude::vec","Creates an empty `Vec<T>`.",46,[[],["vec",3]]],[11,"default","ontio_std::prelude::v1","",44,[[],["box",3]]],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",44,[[],["box",3]]],[11,"default","","",44,[[],["box",3]]],[11,"try_from","","",44,[[["box",3]],[["box",3],["result",4]]]],[11,"serialize","ontio_std::types","",41,[[["vmvaluebuilder",3]]]],[11,"serialize","ontio_std","",81,[[["vmvaluebuilder",3]]]],[11,"serialize","","",43,[[["vmvaluebuilder",3]]]],[11,"deserialize","","",81,[[["vmvalueparser",3]],[["result",4],["error",4]]]],[11,"encode","","",43,[[["sink",3]]]],[11,"encode","ontio_std::types","",41,[[["sink",3]]]],[11,"encode","ontio_std::prelude::vec","",46,[[["sink",3]]]],[11,"encode","ontio_std::prelude","",27,[[["sink",3]]]],[11,"encode","","",45,[[["sink",3]]]],[11,"from","ontio_std::types","Constructs a hash type from the given bytes array of fixed…",41,[[]]],[11,"from","","Constructs a hash type from the given reference to the…",41,[[]]],[11,"from","","Constructs a hash type from the given reference to the…",41,[[]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",42,[[]]],[11,"from","","Constructs a hash type from the given reference to the…",42,[[]]],[11,"from","","Constructs a hash type from the given reference to the…",42,[[]]],[11,"fmt","ontio_std::abi","",30,[[["formatter",3]],["result",6]]],[11,"fmt","ontio_std::types","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"eq","","",41,[[]]],[11,"eq","","",42,[[]]],[11,"cmp","","",41,[[],["ordering",4]]],[11,"cmp","","",42,[[],["ordering",4]]],[11,"partial_cmp","","",41,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",42,[[],[["ordering",4],["option",4]]]],[11,"bitand","","",41,[[]]],[11,"bitand","","",42,[[]]],[11,"bitor","","",41,[[]]],[11,"bitor","","",42,[[]]],[11,"bitxor","","",41,[[]]],[11,"bitxor","","",42,[[]]],[11,"bitand_assign","","",41,[[["h256",3]]]],[11,"bitand_assign","","",41,[[["h256",3]]]],[11,"bitand_assign","","",42,[[["h160",3]]]],[11,"bitand_assign","","",42,[[["h160",3]]]],[11,"bitor_assign","","",41,[[["h256",3]]]],[11,"bitor_assign","","",41,[[["h256",3]]]],[11,"bitor_assign","","",42,[[["h160",3]]]],[11,"bitor_assign","","",42,[[["h160",3]]]],[11,"bitxor_assign","","",41,[[["h256",3]]]],[11,"bitxor_assign","","",41,[[["h256",3]]]],[11,"bitxor_assign","","",42,[[["h160",3]]]],[11,"bitxor_assign","","",42,[[["h160",3]]]],[11,"drop","ontio_std::database","",40,[[]]],[11,"index","ontio_std::types","",41,[[]]],[11,"index","","",42,[[]]],[11,"index_mut","","",41,[[]]],[11,"index_mut","","",42,[[]]],[11,"hash","","",41,[[]]],[11,"hash","","",42,[[]]],[11,"as_ref","","",41,[[]]],[11,"as_ref","","",42,[[]]],[11,"as_ref","","",42,[[],["h160",3]]],[11,"as_ref","","",41,[[],["h256",3]]],[11,"as_mut","","",41,[[]]],[11,"as_mut","","",42,[[]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"clone","","",41,[[],["h256",3]]],[11,"clone","","",42,[[],["h160",3]]],[11,"default","ontio_std::abi","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","ontio_std::types","",41,[[]]],[11,"default","","",42,[[]]],[11,"new","ontio_std::prelude::v1","Allocates memory on the heap and then places `x` into it.",44,[[],["box",3]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",44,[[],[["box",3],["maybeuninit",19]]]],[11,"new_zeroed","","Constructs a new `Box` with uninitialized contents, with…",44,[[],[["box",3],["maybeuninit",19]]]],[11,"pin","","Constructs a new `Pin<Box<T>>`. If `T` does not implement…",44,[[],[["pin",3],["box",3]]]],[11,"into_boxed_slice","","Converts a `Box<T>` into a `Box<[T]>`",44,[[["box",3]],["box",3]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",44,[[],["box",3]]],[11,"assume_init","","Converts to `Box<T>`.",44,[[],["box",3]]],[11,"assume_init","","Converts to `Box<[T]>`.",44,[[],["box",3]]],[11,"from_raw","","Constructs a box from a raw pointer.",44,[[],["box",3]]],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",44,[[["box",3]]]],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as…",44,[[["box",3]],["nonnull",3]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable…",44,[[["box",3]]]],[11,"into_pin","","Converts a `Box<T>` into a `Pin<Box<T>>`",44,[[["box",3]],[["pin",3],["box",3]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",44,[[],[["result",4],["box",3],["box",3]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",44,[[],[["result",4],["box",3],["box",3]]]],[11,"new","ontio_std::prelude","Creates a new empty `String`.",45,[[],["string",3]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",45,[[],["string",3]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",45,[[["vec",3]],[["string",3],["fromutf8error",3],["result",4]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid…",45,[[],["cow",4]]],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`,…",45,[[],[["fromutf16error",3],["result",4],["string",3]]]],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`,…",45,[[],["string",3]]],[11,"into_raw_parts","","Decomposes a `String` into its raw components.",45,[[]]],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",45,[[],["string",3]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking…",45,[[["vec",3]],["string",3]]],[11,"into_bytes","","Converts a `String` into a byte vector.",45,[[],["vec",3]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",45,[[]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",45,[[]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",45,[[]]],[11,"capacity","","Returns this `String`\'s capacity, in bytes.",45,[[]]],[11,"reserve","","Ensures that this `String`\'s capacity is at least…",45,[[]]],[11,"reserve_exact","","Ensures that this `String`\'s capacity is `additional`…",45,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",45,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",45,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",45,[[]]],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",45,[[]]],[11,"push","","Appends the given [`char`] to the end of this `String`.",45,[[]]],[11,"as_bytes","","Returns a byte slice of this `String`\'s contents.",45,[[]]],[11,"truncate","","Shortens this `String` to the specified length.",45,[[]]],[11,"pop","","Removes the last character from the string buffer and…",45,[[],["option",4]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position…",45,[[]]],[11,"retain","","Retains only the characters specified by the predicate.",45,[[]]],[11,"insert","","Inserts a character into this `String` at a byte position.",45,[[]]],[11,"insert_str","","Inserts a string slice into this `String` at a byte…",45,[[]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this…",45,[[],["vec",3]]],[11,"len","","Returns the length of this `String`, in bytes, not…",45,[[]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero, and…",45,[[]]],[11,"split_off","","Splits the string into two at the given index.",45,[[],["string",3]]],[11,"clear","","Truncates this `String`, removing all contents.",45,[[]]],[11,"drain","","Creates a draining iterator that removes the specified…",45,[[],["drain",3]]],[11,"replace_range","","Removes the specified range in the string, and replaces it…",45,[[]]],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",45,[[],["box",3]]],[11,"new","ontio_std::prelude::vec","Constructs a new, empty `Vec<T>`.",46,[[],["vec",3]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",46,[[],["vec",3]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",46,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",46,[[],["vec",3]]],[11,"capacity","","Returns the number of elements the vector can hold without…",46,[[]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",46,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",46,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",46,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",46,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",46,[[]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",46,[[]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",46,[[],["box",3]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",46,[[]]],[11,"as_slice","","Extracts a slice containing the entire vector.",46,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",46,[[]]],[11,"as_ptr","","Returns a raw pointer to the vector\'s buffer.",46,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector\'s buffer.",46,[[]]],[11,"set_len","","Forces the length of the vector to `new_len`.",46,[[]]],[11,"swap_remove","","Removes an element from the vector and returns it.",46,[[]]],[11,"insert","","Inserts an element at position `index` within the vector,…",46,[[]]],[11,"remove","","Removes and returns the element at position `index` within…",46,[[]]],[11,"retain","","Retains only the elements specified by the predicate.",46,[[]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",46,[[]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",46,[[]]],[11,"push","","Appends an element to the back of a collection.",46,[[]]],[11,"pop","","Removes the last element from a vector and returns it, or…",46,[[],["option",4]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",46,[[["vec",3]]]],[11,"drain","","Creates a draining iterator that removes the specified…",46,[[],["drain",3]]],[11,"clear","","Clears the vector, removing all values.",46,[[]]],[11,"len","","Returns the number of elements in the vector, also…",46,[[]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",46,[[]]],[11,"split_off","","Splits the collection into two at the given index.",46,[[],["vec",3]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",46,[[]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",46,[[["vec",3]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",46,[[]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",46,[[]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",46,[[]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",46,[[]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",46,[[],["option",4]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",46,[[],["splice",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",46,[[],["drainfilter",3]]],[11,"as_str","ontio_std::prelude::str","Views the underlying data as a subslice of the original…",55,[[]]],[11,"as_str","","Views the underlying data as a subslice of the original…",56,[[]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",61,[[]]],[11,"error_len","","Provides more information about the failure:",61,[[],["option",4]]],[11,"as_bytes","ontio_std::prelude::string","Returns a slice of [`u8`]s bytes that were attempted to…",74,[[]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a…",74,[[],["vec",3]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the…",74,[[],["utf8error",3]]],[11,"as_slice","ontio_std::prelude::vec","Returns the remaining items of this iterator as a slice.",77,[[]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",77,[[]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",78,[[]]],[11,"reverse","ontio_std::prelude::cmp","Reverses the `Ordering`.",8,[[],["ordering",4]]],[11,"then","","Chains two orderings.",8,[[["ordering",4]],["ordering",4]]],[11,"then_with","","Chains the ordering with the given function.",8,[[],["ordering",4]]],[11,"is_some","ontio_std::prelude","Returns `true` if the option is a [`Some`] value.",27,[[]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",27,[[]]],[11,"contains","","Returns `true` if the option is a [`Some`] value…",27,[[]]],[11,"as_ref","","Converts from `&Option<T>` to `Option<&T>`.",27,[[],["option",4]]],[11,"as_mut","","Converts from `&mut Option<T>` to `Option<&mut T>`.",27,[[],["option",4]]],[11,"as_pin_ref","","Converts from [`Pin`]`<&Option<T>>` to…",27,[[["option",4],["pin",3]],[["pin",3],["option",4]]]],[11,"as_pin_mut","","Converts from [`Pin`]`<&mut Option<T>>` to…",27,[[["option",4],["pin",3]],[["pin",3],["option",4]]]],[11,"expect","","Returns the contained [`Some`] value, consuming the `self`…",27,[[]]],[11,"unwrap","","Returns the contained [`Some`] value, consuming the `self`…",27,[[]]],[11,"unwrap_or","","Returns the contained [`Some`] value or a provided default.",27,[[]]],[11,"unwrap_or_else","","Returns the contained [`Some`] value or computes it from a…",27,[[]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function…",27,[[],["option",4]]],[11,"map_or","","Applies a function to the contained value (if any), or…",27,[[]]],[11,"map_or_else","","Applies a function to the contained value (if any), or…",27,[[]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`],…",27,[[],["result",4]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`],…",27,[[],["result",4]]],[11,"iter","","Returns an iterator over the possibly contained value.",27,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",27,[[],["itermut",3]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise…",27,[[["option",4]],["option",4]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise…",27,[[],["option",4]]],[11,"filter","","Returns [`None`] if the option is [`None`], otherwise…",27,[[],["option",4]]],[11,"or","","Returns the option if it contains a value, otherwise…",27,[[["option",4]],["option",4]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls…",27,[[],["option",4]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is…",27,[[["option",4]],["option",4]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then…",27,[[]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is…",27,[[]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in…",27,[[],["option",4]]],[11,"replace","","Replaces the actual value in the option by the value given…",27,[[],["option",4]]],[11,"zip","","Zips `self` with another `Option`.",27,[[["option",4]],["option",4]]],[11,"zip_with","","Zips `self` and another `Option` with function `f`.",27,[[["option",4]],["option",4]]],[11,"copied","","Maps an `Option<&T>` to an `Option<T>` by copying the…",27,[[],["option",4]]],[11,"copied","","Maps an `Option<&mut T>` to an `Option<T>` by copying the…",27,[[],["option",4]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the…",27,[[],["option",4]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the…",27,[[],["option",4]]],[11,"expect_none","","Consumes `self` while expecting [`None`] and returning…",27,[[]]],[11,"unwrap_none","","Consumes `self` while expecting [`None`] and returning…",27,[[]]],[11,"unwrap_or_default","","Returns the contained [`Some`] value or a default",27,[[]]],[11,"as_deref","","Converts from `Option<T>` (or `&Option<T>`) to…",27,[[],["option",4]]],[11,"as_deref_mut","","Converts from `Option<T>` (or `&mut Option<T>`) to…",27,[[],["option",4]]],[11,"transpose","","Transposes an `Option` of a [`Result`] into a [`Result`]…",27,[[],[["option",4],["result",4]]]],[11,"flatten","","Converts from `Option<Option<T>>` to `Option<T>`",27,[[],["option",4]]],[11,"is_ok","","Returns `true` if the result is [`Ok`].",28,[[]]],[11,"is_err","","Returns `true` if the result is [`Err`].",28,[[]]],[11,"contains","","Returns `true` if the result is an [`Ok`] value containing…",28,[[]]],[11,"contains_err","","Returns `true` if the result is an [`Err`] value…",28,[[]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",28,[[],["option",4]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",28,[[],["option",4]]],[11,"as_ref","","Converts from `&Result<T, E>` to `Result<&T, &E>`.",28,[[],["result",4]]],[11,"as_mut","","Converts from `&mut Result<T, E>` to `Result<&mut T, &mut…",28,[[],["result",4]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a…",28,[[],["result",4]]],[11,"map_or","","Applies a function to the contained value (if [`Ok`]), or…",28,[[]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a…",28,[[]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a…",28,[[],["result",4]]],[11,"iter","","Returns an iterator over the possibly contained value.",28,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",28,[[],["itermut",3]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns…",28,[[["result",4]],["result",4]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the…",28,[[],["result",4]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns…",28,[[["result",4]],["result",4]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the…",28,[[],["result",4]]],[11,"unwrap_or","","Returns the contained [`Ok`] value or a provided default.",28,[[]]],[11,"unwrap_or_else","","Returns the contained [`Ok`] value or computes it from a…",28,[[]]],[11,"copied","","Maps a `Result<&T, E>` to a `Result<T, E>` by copying the…",28,[[],["result",4]]],[11,"copied","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying…",28,[[],["result",4]]],[11,"cloned","","Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the…",28,[[],["result",4]]],[11,"cloned","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning…",28,[[],["result",4]]],[11,"expect","","Returns the contained [`Ok`] value, consuming the `self`…",28,[[]]],[11,"unwrap","","Returns the contained [`Ok`] value, consuming the `self`…",28,[[]]],[11,"expect_err","","Returns the contained [`Err`] value, consuming the `self`…",28,[[]]],[11,"unwrap_err","","Returns the contained [`Err`] value, consuming the `self`…",28,[[]]],[11,"unwrap_or_default","","Returns the contained [`Ok`] value or a default",28,[[]]],[11,"into_ok","","Returns the contained [`Ok`] value, but never panics.",28,[[]]],[11,"as_deref","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",28,[[],["result",4]]],[11,"as_deref_err","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",28,[[],["result",4]]],[11,"as_deref_mut","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",28,[[],["result",4]]],[11,"as_deref_mut_err","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",28,[[],["result",4]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a…",28,[[],[["result",4],["option",4]]]],[11,"flatten","","Converts from `Result<Result<T, E>, E>` to `Result<T, E>`",28,[[],["result",4]]]],"p":[[8,"ToOwned"],[8,"ToString"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Clone"],[8,"AsMut"],[8,"AsRef"],[8,"From"],[8,"Into"],[8,"Default"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Extend"],[8,"IntoIterator"],[8,"Iterator"],[4,"Option"],[4,"Result"],[3,"VmValueParser"],[4,"Error"],[3,"Sink"],[3,"Source"],[3,"VmValueBuilder"],[3,"EventBuilder"],[8,"VmValueDecoder"],[8,"VmValueEncoder"],[8,"Encoder"],[8,"Dispatcher"],[3,"TransferParam"],[3,"ListStore"],[3,"H256"],[3,"H160"],[6,"Address"],[3,"Box"],[3,"String"],[3,"Vec"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[6,"U128"]],"a":{"!=":[94,97,145,153],"<":[104,109,147,157],"<=":[104,109,147,157],"==":[94,97,145,153],">":[104,109,147,157],">=":[104,109,147,157]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);