initSidebarItems({"fn":[["allowance","This method is used in conjunction with the approve method to query the number of approve # Example `no_run # use ontio_std::contract::{ont,TransferParam}; # use ontio_std::abi::{Sink, Source}; # use ontio_std::runtime::input;   let input= input();   let mut source = Source::new(&input);   let (from, to) = source.read().unwrap();   ont::allowance(from,to); `"],["approve","from-address can allow to-address to transfer a certain amount of assets from  from-address. # Example `no_run # use ontio_std::contract::{ont,TransferParam}; # use ontio_std::abi::{Sink, Source}; # use ontio_std::runtime::input;   let input = input();   let mut source = Source::new(&input);   let (from,to,amount) = source.read().unwrap();   ont::approve(from, to, amount); `"],["balance_of","Query the balance of ont assets # Example `no_run # use ontio_std::contract::{ont,TransferParam}; # use ontio_std::abi::{Sink, Source}; # use ontio_std::runtime::input;     let input = input();     let mut source = Source::new(&input);     let addr = source.read().unwrap();     ont::balance_of(addr); `"],["transfer","Transfer method of ont assets, Transfer ont assets from the from address to the to address # Example `no_run # use ontio_std::contract::ont; # use ontio_std::abi::{Sink, Source}; # use ontio_std::runtime::input;   let input= input();   let mut source = Source::new(&input);   let (from, to, amount) = source.read().unwrap();   ont::transfer(from,to, amount); `"],["transfer_from","Spender transfers a certain amount of ont from from-address to to-address # Example `no_run # use ontio_std::contract::{ont,TransferParam}; # use ontio_std::abi::{Sink, Source}; # use ontio_std::runtime::input;   let input= input();   let mut source = Source::new(&input);   let (spender, from, to, amount) = source.read().unwrap();   ont::transfer_from(spender, from, to, amount); `"],["transfer_multi","transfer_multi method of ont assets,Multiple transfers in one transaction # Example `no_run # use ontio_std::contract::{ont,TransferParam}; # use ontio_std::abi::{Sink, Source}; # use ontio_std::runtime::input; # use ontio_std::types::{Address, U128};     let input = input();     let mut source = Source::new(&input);     let trs: Vec<(Address,Address,U128)> = source.read().unwrap();     let mut ts = Vec::<TransferParam>::new();     for tr in trs.iter() {         let trans = TransferParam{            from:tr.0,            to:tr.1,            amount:tr.2,         };         ts.push(trans)     }     ont::transfer_multi(ts.as_slice()); `"]]});